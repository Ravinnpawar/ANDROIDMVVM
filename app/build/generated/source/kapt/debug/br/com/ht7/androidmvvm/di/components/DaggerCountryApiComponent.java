// Generated by Dagger (https://google.github.io/dagger).
package br.com.ht7.androidmvvm.di.components;

import br.com.ht7.androidmvvm.di.modules.ApiModule;
import br.com.ht7.androidmvvm.di.modules.ApiModule_CountryApiFactory;
import br.com.ht7.androidmvvm.di.modules.ApiModule_CountryServiceFactory;
import br.com.ht7.androidmvvm.models.CountryService;
import br.com.ht7.androidmvvm.models.CountryService_MembersInjector;
import br.com.ht7.androidmvvm.viewmodels.ListViewModel;
import br.com.ht7.androidmvvm.viewmodels.ListViewModel_MembersInjector;
import dagger.internal.Preconditions;

public final class DaggerCountryApiComponent implements CountryApiComponent {
  private ApiModule apiModule;

  private DaggerCountryApiComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  public static CountryApiComponent create() {
    return new Builder().build();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.apiModule = builder.apiModule;
  }

  @Override
  public void inject(CountryService service) {
    injectCountryService(service);
  }

  @Override
  public void inject(ListViewModel viewModel) {
    injectListViewModel(viewModel);
  }

  private CountryService injectCountryService(CountryService instance) {
    CountryService_MembersInjector.injectApi(
        instance, ApiModule_CountryApiFactory.proxyCountryApi(apiModule));
    return instance;
  }

  private ListViewModel injectListViewModel(ListViewModel instance) {
    ListViewModel_MembersInjector.injectService(
        instance, ApiModule_CountryServiceFactory.proxyCountryService(apiModule));
    return instance;
  }

  public static final class Builder {
    private ApiModule apiModule;

    private Builder() {}

    public CountryApiComponent build() {
      if (apiModule == null) {
        this.apiModule = new ApiModule();
      }
      return new DaggerCountryApiComponent(this);
    }

    public Builder apiModule(ApiModule apiModule) {
      this.apiModule = Preconditions.checkNotNull(apiModule);
      return this;
    }
  }
}
